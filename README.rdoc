User
  username
  xpos
  ypos

Move
  user
  friend
  direction

### configuration

for local development, there are `.env.dev` and `Procfile.dev` files ignored from git.
these can contain secret tokens for environment vars. e.g. for twitter oauth.  `Procfile.dev.example` and
`.env.dev.example` contain an examples.

start with `foreman start -f Procfile.dev -e .env.dev` and your application will run on http://localhost:5000/

### running the tweetstream process

add the following to `Procfile` or `Procfile.dev`:

```
bundle exec tweetstream_server: rake tweetstream:start
```

the tweetstream process runs an eventmachine server that manages the connection to Twitter's HTTP/2
tweetstream API hook.  when it receives new records on the connection, it creates the appropriate jobs
on Resque, which are then picked up by the workers in our Resque Pool.  this is really the simplest way
to manage this work.

### setting up resque

install redis with `brew install redis`

`resque-pool` allows you to more dynamically control resque worker processes on heroku
similar to how unicorn manages web servers

run `heroku config:set TERM_CHILD=1 WORKER_CONCURRENCY=5` to set up the right signal handling and configure the
default number of workers.

for heroku, add the following to your `Procfile.dev`:

```
worker: bundle exec resque-pool --environment development
```

to run the resque pool in development:

### resque jobs

for now, there is one job, ProcessTweet, that handles all incoming tweets.
the tweetstream process can do a limited amount of preprocessing to
create multiple job types per type of tweet command.

Instead of sending tweets, a ProcessTweet job can be created through the console, with a status object attached to it.
The status object needs to be formatted as a Twitter API response.

```ruby
Resque.enqueue(ProcessTweet, {user: {screen_name: 'simpletest10'}, text: "go left @simpleTwitterGame"})
```

RESOURCES
http://blog.bigbinary.com/2015/07/19/using-reactjs-with-rails-actioncable.html
https://github.com/websocket-rails/websocket-rails/wiki/Multiple-Servers-and-Background-Jobs
